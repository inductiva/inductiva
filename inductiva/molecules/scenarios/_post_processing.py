"""Post process Gromacs simulation outputs."""
import glob
import os
import MDAnalysis as mda
import nglview as nv
import threading
import time
from ipywidgets import Output, IntProgress
from inductiva.types import Path
import os
import MDAnalysis as mda
import nglview as nv
from PIL import Image
import io
from moviepy.editor import ImageSequenceClip

from inductiva.utils.templates import (TEMPLATES_PATH)

SCENARIO_TEMPLATE_DIR = os.path.join(TEMPLATES_PATH, "protein_visualization")
GROMACS_TEMPLATE_INPUT_DIR = "gromacs"


class MovieMaker:
    """ 

    """

    def __init__(
        self,
        view,
        download_folder=None,
        output='my_movie.mp4',
        fps=8,
        start=0,
        stop=-1,
        step=1,
        timeout=0.1,
    ):
        if download_folder is None:
            os.makedirs('movie', exist_ok=True)
            download_folder = 'movie'
        self.view = view
        self.download_folder = download_folder
        self.timeout = timeout
        self.fps = fps

        self.output = output
        if stop < 0:
            stop = self.view.max_frame + 1
        self._time_range = range(start, stop, step)
        self._iframe = iter(self._time_range)
        self._progress = IntProgress(max=len(self._time_range) - 1)
        self._woutput = Output()
        self._event = threading.Event()
        self._thread = None

    def sleep(self):
        time.sleep(self.timeout)

    def make(self):
        progress = IntProgress(description='Rendering...',
                               max=len(self._time_range) - 1)
        self._event = threading.Event()

        def _make(event):
            image_files = []
            iw = None
            for i in self._time_range:
                progress.value = i
                if not event.is_set():
                    self.view.frame = i
                    self.sleep()
                    iw = self.view.render_image()
                    image = self.view._display_image()
                    self.sleep()
                    image_bytes = image.data
                    image = Image.open(io.BytesIO(image_bytes))
                    filename = os.path.join(self.download_folder,
                                            f'figure_{i}.png').format(i)
                    image_files.append(filename)
                    image.save(filename, "PNG")
                    iw.close()

            if not self._event.is_set():
                progress.description = "Writing ..."
                clip = ImageSequenceClip(image_files, fps=self.fps)
                with Output():
                    if self.output.endswith('.gif'):
                        clip.write_gif(
                            self.output,
                            fps=self.fps,
                            verbose=False,
                        )
                    else:
                        clip.write_videofile(self.output, fps=self.fps)
                progress.description = 'Done'
                time.sleep(1)
                progress.close()

        self.thread = threading.Thread(target=_make, args=(self._event,))
        self.thread.daemon = True
        self.thread.start()
        return progress


class GROMACSSimulationOutput:
    """Post process a GROMACS simulation outputs."""

    def __init__(self, sim_output_path: Path = None):
        """Initializes a `SimulationOutput` object.

        Given a simulation output directory that contains the standard files
        generated by a GROMACS simulation run, this class provides methods to
        visualize the simulation outputs in a notebook.

        Args:
            sim_output_path: Path to the simulation output directory."""

        self.sim_output_dir = sim_output_path

    def render(self,
               pdb_file_name: str = None,
               trajectory_file_name: str = "trajectory.xtc"):
        """Visualize the simulation outputs in a notebook using NGLView.

        Args:
            pdb_file: Path to the PDB file to be visualized.
            trajectory_name: Name of the trajectory file to be visualized."""

        if pdb_file_name is None:
            pdb_pattern = os.path.join(self.sim_output_dir, "*.pdb")
            pdb_file_name = glob.glob(pdb_pattern)

            if pdb_file_name is None:
                raise ValueError("No PDB file found in the output directory.")

            if len(pdb_file_name) != 1:
                raise ValueError(
                    "Please specify the .pdb file to be visualized.")

        protein_file = os.path.join(self.sim_output_dir, pdb_file_name)
        trajectory = os.path.join(self.sim_output_dir, trajectory_file_name)
        system = mda.Universe(protein_file, trajectory)

        view = nv.show_mdanalysis(system)
        view.add_ball_and_stick(
            "all")  # Render the molecules as ball-and-stick models
        view.center()  # Center the view
        view.parameters = {
            "backgroundColor": "white"
        }  # Set the background color

        return view
