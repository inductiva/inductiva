import os
import MDAnalysis as mda
import nglview as nv
from pathlib import Path
from inductiva.molecules.scenarios._post_processing import MovieMaker

class MDWaterBoxSimulationOutput:
    """Post process a GROMACS simulation outputs."""

    def __init__(self, sim_output_path: Path = None):
        """Initializes a `SimulationOutput` object.

        Given a simulation output directory that contains the standard files
        generated by a GROMACS simulation run, this class provides methods to
        visualize the simulation outputs in a notebook.

        Args:
            sim_output_path: Path to the simulation output directory."""

        self.sim_output_dir = sim_output_path

    def visualize(self):
        """Visualize the simulation outputs in a notebook using NGLView."""

        topology = os.path.join(self.sim_output_dir, "eql.tpr")
        trajectory = os.path.join(self.sim_output_dir, "eql.xtc")
        universe = mda.Universe(topology, trajectory, all_coordinates=True)
        atoms = universe.atoms

        transformation = mda.transformations.unwrap(atoms)
        universe.trajectory.add_transformations(transformation)

        view = nv.show_mdanalysis(universe)
        view.add_ball_and_stick("all")
        view.center()
        view.parameters = {
            "backgroundColor": "white"
        }  # Set the background color
        return view
    
    def render_movie(self, view,save_path: Path = None, fps=8, start=0,stop=-1): 
        movie = MovieMaker(view, output=save_path, fps=fps, start=start, stop=stop)
        movie.make()

    # def to_movie(self, view): 
    #     thread = threading.Thread(
    #         target=self.render_movie(view=view, output_path="movie.mp4"),
    #     )
    #     thread.daemon = True
    #     thread.start()
    
    # def render_movie(self,view, output_path, fps=8):
    #     #with tempfile.TemporaryDirectory() as tmpdir:
    #     imagefiles = []
    #     for frame in range(0, 1000):
    #         print(frame)
    #         view.frame = frame
    #         view.render_image()
    #         image = view._display_image()
    #         image_bytes = image.data
    #         image = Image.open(io.BytesIO(image_bytes))
    #         filename = os.path.join("water_small", f'figure_{frame}.png').format(frame)
    #         image.save(filename, "PNG")
    #         sleep(0.1)
    #         imagefiles.append(filename)
    #     clip = ImageSequenceClip(imagefiles, fps=fps)
    #     clip.write_videofile(output_path)
