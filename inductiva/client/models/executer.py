# coding: utf-8

"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class Executer(BaseModel):
    """
    Executer
    """

  # noqa: E501
    uuid: StrictStr
    cpu_count_logical: StrictInt
    cpu_count_physical: StrictInt
    memory: StrictInt
    n_mpi_hosts: StrictInt
    vm_type: StrictStr
    vm_name: Optional[StrictStr] = None
    host_type: StrictStr
    error_detail: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "uuid", "cpu_count_logical", "cpu_count_physical", "memory",
        "n_mpi_hosts", "vm_type", "vm_name", "host_type", "error_detail"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Executer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if vm_name (nullable) is None
        # and model_fields_set contains the field
        if self.vm_name is None and "vm_name" in self.model_fields_set:
            _dict['vm_name'] = None

        # set to None if error_detail (nullable) is None
        # and model_fields_set contains the field
        if self.error_detail is None and "error_detail" in self.model_fields_set:
            _dict['error_detail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Executer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "cpu_count_logical": obj.get("cpu_count_logical"),
            "cpu_count_physical": obj.get("cpu_count_physical"),
            "memory": obj.get("memory"),
            "n_mpi_hosts": obj.get("n_mpi_hosts"),
            "vm_type": obj.get("vm_type"),
            "vm_name": obj.get("vm_name"),
            "host_type": obj.get("host_type"),
            "error_detail": obj.get("error_detail")
        })
        return _obj
