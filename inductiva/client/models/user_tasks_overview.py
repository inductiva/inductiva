# coding: utf-8

"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self


class UserTasksOverview(BaseModel):
    """
    UserTasksOverview
    """

  # noqa: E501
    start_date: date
    end_date: date
    username: StrictStr
    total_tasks: StrictInt
    total_cost: Union[StrictFloat, StrictInt]
    total_wait_time: Union[StrictFloat, StrictInt]
    total_compute_time: Union[StrictFloat, StrictInt]
    avg_task_duration: Union[StrictFloat, StrictInt]
    task_success_rate: Union[StrictFloat, StrictInt]
    preempted_tasks: StrictInt
    __properties: ClassVar[List[str]] = [
        "start_date", "end_date", "username", "total_tasks", "total_cost",
        "total_wait_time", "total_compute_time", "avg_task_duration",
        "task_success_rate", "preempted_tasks"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserTasksOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserTasksOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "username": obj.get("username"),
            "total_tasks": obj.get("total_tasks"),
            "total_cost": obj.get("total_cost"),
            "total_wait_time": obj.get("total_wait_time"),
            "total_compute_time": obj.get("total_compute_time"),
            "avg_task_duration": obj.get("avg_task_duration"),
            "task_success_rate": obj.get("task_success_rate"),
            "preempted_tasks": obj.get("preempted_tasks")
        })
        return _obj
