# coding: utf-8

"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class MachineInfo(BaseModel):
    """
    MachineInfo
    """

  # noqa: E501
    uuid: StrictStr
    cpu_count_logical: StrictInt
    cpu_count_physical: StrictInt
    memory_bytes: StrictInt
    host_name: Optional[StrictStr] = None
    started_at: Optional[datetime] = None
    terminated_at: Optional[datetime] = None
    last_seen_at: Optional[datetime] = None
    current_task_id: Optional[StrictStr] = None
    disk_size_gb: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = [
        "uuid", "cpu_count_logical", "cpu_count_physical", "memory_bytes",
        "host_name", "started_at", "terminated_at", "last_seen_at",
        "current_task_id", "disk_size_gb"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MachineInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if host_name (nullable) is None
        # and model_fields_set contains the field
        if self.host_name is None and "host_name" in self.model_fields_set:
            _dict['host_name'] = None

        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['started_at'] = None

        # set to None if terminated_at (nullable) is None
        # and model_fields_set contains the field
        if self.terminated_at is None and "terminated_at" in self.model_fields_set:
            _dict['terminated_at'] = None

        # set to None if last_seen_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_seen_at is None and "last_seen_at" in self.model_fields_set:
            _dict['last_seen_at'] = None

        # set to None if current_task_id (nullable) is None
        # and model_fields_set contains the field
        if self.current_task_id is None and "current_task_id" in self.model_fields_set:
            _dict['current_task_id'] = None

        # set to None if disk_size_gb (nullable) is None
        # and model_fields_set contains the field
        if self.disk_size_gb is None and "disk_size_gb" in self.model_fields_set:
            _dict['disk_size_gb'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MachineInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "cpu_count_logical": obj.get("cpu_count_logical"),
            "cpu_count_physical": obj.get("cpu_count_physical"),
            "memory_bytes": obj.get("memory_bytes"),
            "host_name": obj.get("host_name"),
            "started_at": obj.get("started_at"),
            "terminated_at": obj.get("terminated_at"),
            "last_seen_at": obj.get("last_seen_at"),
            "current_task_id": obj.get("current_task_id"),
            "disk_size_gb": obj.get("disk_size_gb")
        })
        return _obj
