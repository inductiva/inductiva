# coding: utf-8

"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from inductiva.client.models.org_status import OrgStatus
from typing import Optional, Set
from typing_extensions import Self


class OrganizationUsers(BaseModel):
    """
    OrganizationUsers
    """

  # noqa: E501
    id: StrictStr
    identity_provider_id: StrictStr
    name: StrictStr
    tier: StrictStr
    status: OrgStatus
    creation_ts: datetime
    costs_fee_percentage: Union[StrictFloat, StrictInt]
    credits_boost_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    total_users: StrictInt
    users: List[StrictStr]
    __properties: ClassVar[List[str]] = [
        "id", "identity_provider_id", "name", "tier", "status", "creation_ts",
        "costs_fee_percentage", "credits_boost_percentage", "total_users",
        "users"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationUsers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if credits_boost_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.credits_boost_percentage is None and "credits_boost_percentage" in self.model_fields_set:
            _dict['credits_boost_percentage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationUsers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "identity_provider_id": obj.get("identity_provider_id"),
            "name": obj.get("name"),
            "tier": obj.get("tier"),
            "status": obj.get("status"),
            "creation_ts": obj.get("creation_ts"),
            "costs_fee_percentage": obj.get("costs_fee_percentage"),
            "credits_boost_percentage": obj.get("credits_boost_percentage"),
            "total_users": obj.get("total_users"),
            "users": obj.get("users")
        })
        return _obj
