# coding: utf-8

"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from inductiva.client.models.currency_code import CurrencyCode
from inductiva.client.models.top_up_type import TopUpType
from typing import Optional, Set
from typing_extensions import Self


class Transaction(BaseModel):
    """
    Transaction
    """

  # noqa: E501
    amount: Union[StrictFloat, StrictInt]
    time: datetime
    currency: Optional[CurrencyCode] = None
    fee: Optional[Union[StrictFloat, StrictInt]] = None
    fee_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    total: Optional[Union[StrictFloat, StrictInt]] = None
    top_up_type: TopUpType
    __properties: ClassVar[List[str]] = [
        "amount", "time", "currency", "fee", "fee_percentage", "total",
        "top_up_type"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fee (nullable) is None
        # and model_fields_set contains the field
        if self.fee is None and "fee" in self.model_fields_set:
            _dict['fee'] = None

        # set to None if fee_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.fee_percentage is None and "fee_percentage" in self.model_fields_set:
            _dict['fee_percentage'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "time": obj.get("time"),
            "currency": obj.get("currency"),
            "fee": obj.get("fee"),
            "fee_percentage": obj.get("fee_percentage"),
            "total": obj.get("total"),
            "top_up_type": obj.get("top_up_type")
        })
        return _obj
