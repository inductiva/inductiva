# coding: utf-8

"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from inductiva.client.models.task_operation import TaskOperation
from inductiva.client.models.task_status_code import TaskStatusCode
from typing import Optional, Set
from typing_extensions import Self


class TaskStatusInfo(BaseModel):
    """
    TaskStatusInfo
    """

  # noqa: E501
    machine_id: Optional[StrictStr] = None
    status: TaskStatusCode
    timestamp: datetime
    end_timestamp: Optional[datetime] = None
    description: StrictStr
    alias: StrictStr
    operations: List[TaskOperation]
    __properties: ClassVar[List[str]] = [
        "machine_id", "status", "timestamp", "end_timestamp", "description",
        "alias", "operations"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskStatusInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in operations (list)
        _items = []
        if self.operations:
            for _item_operations in self.operations:
                if _item_operations:
                    _items.append(_item_operations.to_dict())
            _dict['operations'] = _items
        # set to None if machine_id (nullable) is None
        # and model_fields_set contains the field
        if self.machine_id is None and "machine_id" in self.model_fields_set:
            _dict['machine_id'] = None

        # set to None if end_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.end_timestamp is None and "end_timestamp" in self.model_fields_set:
            _dict['end_timestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskStatusInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "machine_id":
                obj.get("machine_id"),
            "status":
                obj.get("status"),
            "timestamp":
                obj.get("timestamp"),
            "end_timestamp":
                obj.get("end_timestamp"),
            "description":
                obj.get("description"),
            "alias":
                obj.get("alias"),
            "operations": [
                TaskOperation.from_dict(_item) for _item in obj["operations"]
            ] if obj.get("operations") is not None else None
        })
        return _obj
