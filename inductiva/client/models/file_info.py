# coding: utf-8

"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class FileInfo(BaseModel):
    """
    FileInfo
    """

  # noqa: E501
    name: StrictStr
    size: Optional[StrictInt] = None
    compressed_size: Optional[StrictInt] = None
    range_start: Optional[StrictInt] = None
    creation_time: Optional[datetime] = None
    compress_type: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "name", "size", "compressed_size", "range_start", "creation_time",
        "compress_type"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['size'] = None

        # set to None if compressed_size (nullable) is None
        # and model_fields_set contains the field
        if self.compressed_size is None and "compressed_size" in self.model_fields_set:
            _dict['compressed_size'] = None

        # set to None if range_start (nullable) is None
        # and model_fields_set contains the field
        if self.range_start is None and "range_start" in self.model_fields_set:
            _dict['range_start'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creation_time'] = None

        # set to None if compress_type (nullable) is None
        # and model_fields_set contains the field
        if self.compress_type is None and "compress_type" in self.model_fields_set:
            _dict['compress_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "size": obj.get("size"),
            "compressed_size": obj.get("compressed_size"),
            "range_start": obj.get("range_start"),
            "creation_time": obj.get("creation_time"),
            "compress_type": obj.get("compress_type")
        })
        return _obj
