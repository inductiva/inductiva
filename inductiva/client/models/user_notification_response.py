# coding: utf-8

"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from inductiva.client.models.notification_type import NotificationType
from typing import Optional, Set
from typing_extensions import Self


class UserNotificationResponse(BaseModel):
    """
    Schema for user notification responses.
    """

  # noqa: E501
    id: StrictInt
    user_id: StrictInt
    notification_type: NotificationType
    timestamp: datetime
    first_read_at: Optional[datetime] = None
    notification_message: StrictStr
    notification_metadata: Optional[Dict[str, Any]] = None
    created_at: datetime
    updated_at: datetime
    __properties: ClassVar[List[str]] = [
        "id", "user_id", "notification_type", "timestamp", "first_read_at",
        "notification_message", "notification_metadata", "created_at",
        "updated_at"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserNotificationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if first_read_at (nullable) is None
        # and model_fields_set contains the field
        if self.first_read_at is None and "first_read_at" in self.model_fields_set:
            _dict['first_read_at'] = None

        # set to None if notification_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.notification_metadata is None and "notification_metadata" in self.model_fields_set:
            _dict['notification_metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserNotificationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "notification_type": obj.get("notification_type"),
            "timestamp": obj.get("timestamp"),
            "first_read_at": obj.get("first_read_at"),
            "notification_message": obj.get("notification_message"),
            "notification_metadata": obj.get("notification_metadata"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj
