# coding: utf-8
"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from inductiva.client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401

from inductiva.client.model.http_validation_error import HTTPValidationError
from inductiva.client.model.instance_group import InstanceGroup

from . import path

# Query params
GpuCountSchema = schemas.IntSchema
GpuTypeSchema = schemas.StrSchema
ImageNameSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams', {
        'gpu_count': typing.Union[
            GpuCountSchema,
            decimal.Decimal,
            int,
        ],
        'gpu_type': typing.Union[
            GpuTypeSchema,
            str,
        ],
    })
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams', {
        'image_name': typing.Union[
            ImageNameSchema,
            str,
        ],
    },
    total=False)


class RequestQueryParams(RequestRequiredQueryParams,
                         RequestOptionalQueryParams):
    pass


request_query_gpu_count = api_client.QueryParameter(
    name="gpu_count",
    style=api_client.ParameterStyle.FORM,
    schema=GpuCountSchema,
    required=True,
    explode=True,
)
request_query_gpu_type = api_client.QueryParameter(
    name="gpu_type",
    style=api_client.ParameterStyle.FORM,
    schema=GpuTypeSchema,
    required=True,
    explode=True,
)
request_query_image_name = api_client.QueryParameter(
    name="image_name",
    style=api_client.ParameterStyle.FORM,
    schema=ImageNameSchema,
    explode=True,
)
# body param
SchemaForRequestBodyApplicationJson = InstanceGroup

request_body_instance_group = api_client.RequestBody(
    content={
        'application/json':
            api_client.MediaType(schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'APIKeyHeader',
]
SchemaFor200ResponseBodyApplicationJson = schemas.AnyTypeSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json':
            api_client.MediaType(schema=SchemaFor200ResponseBodyApplicationJson
                                ),
    },
)
SchemaFor422ResponseBodyApplicationJson = HTTPValidationError


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor422ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    content={
        'application/json':
            api_client.MediaType(schema=SchemaFor422ResponseBodyApplicationJson
                                ),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '422': _response_for_422,
}
_all_accept_content_types = ('application/json',)


class BaseApi(api_client.Api):

    @typing.overload
    def _start_instances_with_gpu_oapg(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: typing_extensions.Literal["application/json"] = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
            ApiResponseFor200,
    ]:
        ...

    @typing.overload
    def _start_instances_with_gpu_oapg(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
            ApiResponseFor200,
    ]:
        ...

    @typing.overload
    def _start_instances_with_gpu_oapg(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def _start_instances_with_gpu_oapg(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
            ApiResponseFor200,
            api_client.ApiResponseWithoutDeserialization,
    ]:
        ...

    def _start_instances_with_gpu_oapg(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: str = 'application/json',
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Start Instances With Gpu
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
                request_query_gpu_count,
                request_query_gpu_type,
                request_query_image_name,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator(
                )
            serialized_data = parameter.serialize(parameter_data,
                                                  prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead'
            )
        _fields = None
        _body = None
        serialized_data = request_body_instance_group.serialize(
            body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response)
        else:
            response_for_status = _status_code_to_response.get(
                str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(status=response.status,
                                          reason=response.reason,
                                          api_response=api_response)

        return api_response


class StartInstancesWithGpu(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def start_instances_with_gpu(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: typing_extensions.Literal["application/json"] = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
            ApiResponseFor200,
    ]:
        ...

    @typing.overload
    def start_instances_with_gpu(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
            ApiResponseFor200,
    ]:
        ...

    @typing.overload
    def start_instances_with_gpu(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def start_instances_with_gpu(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
            ApiResponseFor200,
            api_client.ApiResponseWithoutDeserialization,
    ]:
        ...

    def start_instances_with_gpu(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: str = 'application/json',
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._start_instances_with_gpu_oapg(
            body=body,
            query_params=query_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: typing_extensions.Literal["application/json"] = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
            ApiResponseFor200,
    ]:
        ...

    @typing.overload
    def post(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
            ApiResponseFor200,
    ]:
        ...

    @typing.overload
    def post(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def post(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
            ApiResponseFor200,
            api_client.ApiResponseWithoutDeserialization,
    ]:
        ...

    def post(
        self,
        body: typing.Union[
            SchemaForRequestBodyApplicationJson,
        ],
        content_type: str = 'application/json',
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._start_instances_with_gpu_oapg(
            body=body,
            query_params=query_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization)
