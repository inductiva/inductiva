# coding: utf-8
"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from inductiva.client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401

from inductiva.client.model.providers import Providers
from inductiva.client.model.http_validation_error import HTTPValidationError
from inductiva.client.model.machine_type import MachineType

from . import path

# Query params


class MachineFamiliesSchema(schemas.ListSchema):

    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[
            MetaOapg.items,
            str,
        ]], typing.List[typing.Union[
            MetaOapg.items,
            str,
        ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MachineFamiliesSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class MachineConfigsSchema(schemas.ListSchema):

    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[
            MetaOapg.items,
            str,
        ]], typing.List[typing.Union[
            MetaOapg.items,
            str,
        ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MachineConfigsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class VcpusRangeSchema(schemas.ListSchema):

    class MetaOapg:
        max_items = 2
        min_items = 2
        items = schemas.IntSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[
            MetaOapg.items,
            decimal.Decimal,
            int,
        ]], typing.List[typing.Union[
            MetaOapg.items,
            decimal.Decimal,
            int,
        ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'VcpusRangeSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class MemoryRangeSchema(schemas.ListSchema):

    class MetaOapg:
        max_items = 2
        min_items = 2
        items = schemas.IntSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[
            MetaOapg.items,
            decimal.Decimal,
            int,
        ]], typing.List[typing.Union[
            MetaOapg.items,
            decimal.Decimal,
            int,
        ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MemoryRangeSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class PriceRangeSchema(schemas.ListSchema):

    class MetaOapg:
        max_items = 2
        min_items = 2
        items = schemas.NumberSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[
            MetaOapg.items,
            decimal.Decimal,
            int,
            float,
        ]], typing.List[typing.Union[
            MetaOapg.items,
            decimal.Decimal,
            int,
            float,
        ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PriceRangeSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class SpotSchema(
        schemas.ComposedSchema,):

    class MetaOapg:
        any_of_0 = schemas.BoolSchema

        class any_of_1(schemas.EnumBase, schemas.StrSchema):

            class MetaOapg:
                enum_value_to_name = {
                    "true": "TRUE",
                    "false": "FALSE",
                }

            @schemas.classproperty
            def TRUE(cls):
                return cls("true")

            @schemas.classproperty
            def FALSE(cls):
                return cls("false")

        @classmethod
        @functools.lru_cache()
        def any_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.any_of_0,
                cls.any_of_1,
            ]

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            bool,
            None,
            list,
            tuple,
            bytes,
            io.FileIO,
            io.BufferedReader,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'SpotSchema':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )


ProviderIdSchema = Providers
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams', {})
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams', {
        'machine_families':
            typing.Union[
                MachineFamiliesSchema,
                list,
                tuple,
            ],
        'machine_configs':
            typing.Union[
                MachineConfigsSchema,
                list,
                tuple,
            ],
        'vcpus_range':
            typing.Union[
                VcpusRangeSchema,
                list,
                tuple,
            ],
        'memory_range':
            typing.Union[
                MemoryRangeSchema,
                list,
                tuple,
            ],
        'price_range':
            typing.Union[
                PriceRangeSchema,
                list,
                tuple,
            ],
        'spot':
            typing.Union[
                SpotSchema,
                dict,
                frozendict.frozendict,
                str,
                date,
                datetime,
                uuid.UUID,
                int,
                float,
                decimal.Decimal,
                bool,
                None,
                list,
                tuple,
                bytes,
                io.FileIO,
                io.BufferedReader,
            ],
        'provider_id':
            typing.Union[
                ProviderIdSchema,
            ],
    },
    total=False)


class RequestQueryParams(RequestRequiredQueryParams,
                         RequestOptionalQueryParams):
    pass


request_query_machine_families = api_client.QueryParameter(
    name="machine_families",
    style=api_client.ParameterStyle.FORM,
    schema=MachineFamiliesSchema,
    explode=True,
)
request_query_machine_configs = api_client.QueryParameter(
    name="machine_configs",
    style=api_client.ParameterStyle.FORM,
    schema=MachineConfigsSchema,
    explode=True,
)
request_query_vcpus_range = api_client.QueryParameter(
    name="vcpus_range",
    style=api_client.ParameterStyle.FORM,
    schema=VcpusRangeSchema,
    explode=True,
)
request_query_memory_range = api_client.QueryParameter(
    name="memory_range",
    style=api_client.ParameterStyle.FORM,
    schema=MemoryRangeSchema,
    explode=True,
)
request_query_price_range = api_client.QueryParameter(
    name="price_range",
    style=api_client.ParameterStyle.FORM,
    schema=PriceRangeSchema,
    explode=True,
)
request_query_spot = api_client.QueryParameter(
    name="spot",
    style=api_client.ParameterStyle.FORM,
    schema=SpotSchema,
    explode=True,
)
request_query_provider_id = api_client.QueryParameter(
    name="provider_id",
    style=api_client.ParameterStyle.FORM,
    schema=ProviderIdSchema,
    explode=True,
)
_auth = [
    'APIKeyHeader',
]


class SchemaFor200ResponseBodyApplicationJson(schemas.ListSchema):

    class MetaOapg:

        @staticmethod
        def items() -> typing.Type['MachineType']:
            return MachineType

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['MachineType'],
                           typing.List['MachineType']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'MachineType':
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json':
            api_client.MediaType(schema=SchemaFor200ResponseBodyApplicationJson
                                ),
    },
)
SchemaFor422ResponseBodyApplicationJson = HTTPValidationError


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor422ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    content={
        'application/json':
            api_client.MediaType(schema=SchemaFor422ResponseBodyApplicationJson
                                ),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '422': _response_for_422,
}
_all_accept_content_types = ('application/json',)


class BaseApi(api_client.Api):

    @typing.overload
    def _list_available_machine_types_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
            ApiResponseFor200,
    ]:
        ...

    @typing.overload
    def _list_available_machine_types_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def _list_available_machine_types_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
            ApiResponseFor200,
            api_client.ApiResponseWithoutDeserialization,
    ]:
        ...

    def _list_available_machine_types_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        List Available Machine Types
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
                request_query_machine_families,
                request_query_machine_configs,
                request_query_vcpus_range,
                request_query_memory_range,
                request_query_price_range,
                request_query_spot,
                request_query_provider_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator(
                )
            serialized_data = parameter.serialize(parameter_data,
                                                  prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response)
        else:
            response_for_status = _status_code_to_response.get(
                str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(status=response.status,
                                          reason=response.reason,
                                          api_response=api_response)

        return api_response


class ListAvailableMachineTypes(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def list_available_machine_types(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
            ApiResponseFor200,
    ]:
        ...

    @typing.overload
    def list_available_machine_types(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def list_available_machine_types(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
            ApiResponseFor200,
            api_client.ApiResponseWithoutDeserialization,
    ]:
        ...

    def list_available_machine_types(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_available_machine_types_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
            ApiResponseFor200,
    ]:
        ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
            ApiResponseFor200,
            api_client.ApiResponseWithoutDeserialization,
    ]:
        ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_available_machine_types_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization)
