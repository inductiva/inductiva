# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class MultiPartExportOperation(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Body of the request to the multipart export files endpoint.
    """

    class MetaOapg:
        required = {
            "path",
            "parts_size",
            "complete_multipart_url",
            "upload_parts",
        }

        class properties:
            path = schemas.StrSchema
            parts_size = schemas.IntSchema

            class upload_parts(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['UploadPart']:
                        return UploadPart

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UploadPart'],
                                       typing.List['UploadPart']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'upload_parts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'UploadPart':
                    return super().__getitem__(i)

            class complete_multipart_url(schemas.StrSchema):
                pass

            __annotations__ = {
                "path": path,
                "parts_size": parts_size,
                "upload_parts": upload_parts,
                "complete_multipart_url": complete_multipart_url,
            }

    path: MetaOapg.properties.path
    parts_size: MetaOapg.properties.parts_size
    complete_multipart_url: MetaOapg.properties.complete_multipart_url
    upload_parts: MetaOapg.properties.upload_parts

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["path"]
    ) -> MetaOapg.properties.path:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["parts_size"]
    ) -> MetaOapg.properties.parts_size:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["upload_parts"]
    ) -> MetaOapg.properties.upload_parts:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["complete_multipart_url"]
    ) -> MetaOapg.properties.complete_multipart_url:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "path",
        "parts_size",
        "upload_parts",
        "complete_multipart_url",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["path"]
    ) -> MetaOapg.properties.path:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["parts_size"]
    ) -> MetaOapg.properties.parts_size:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["upload_parts"]
    ) -> MetaOapg.properties.upload_parts:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["complete_multipart_url"]
    ) -> MetaOapg.properties.complete_multipart_url:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "path",
        "parts_size",
        "upload_parts",
        "complete_multipart_url",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        path: typing.Union[
            MetaOapg.properties.path,
            str,
        ],
        parts_size: typing.Union[
            MetaOapg.properties.parts_size,
            decimal.Decimal,
            int,
        ],
        complete_multipart_url: typing.Union[
            MetaOapg.properties.complete_multipart_url,
            str,
        ],
        upload_parts: typing.Union[
            MetaOapg.properties.upload_parts,
            list,
            tuple,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'MultiPartExportOperation':
        return super().__new__(
            cls,
            *_args,
            path=path,
            parts_size=parts_size,
            complete_multipart_url=complete_multipart_url,
            upload_parts=upload_parts,
            _configuration=_configuration,
            **kwargs,
        )


from inductiva.client.model.upload_part import UploadPart
