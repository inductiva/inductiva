# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class UserCampaign(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "available_credits",
            "expiry_date",
            "initial_credits",
            "name",
            "enrollment_date",
        }

        class properties:
            name = schemas.StrSchema
            enrollment_date = schemas.DateTimeSchema
            expiry_date = schemas.DateTimeSchema
            initial_credits = schemas.NumberSchema
            available_credits = schemas.NumberSchema
            __annotations__ = {
                "name": name,
                "enrollment_date": enrollment_date,
                "expiry_date": expiry_date,
                "initial_credits": initial_credits,
                "available_credits": available_credits,
            }

    available_credits: MetaOapg.properties.available_credits
    expiry_date: MetaOapg.properties.expiry_date
    initial_credits: MetaOapg.properties.initial_credits
    name: MetaOapg.properties.name
    enrollment_date: MetaOapg.properties.enrollment_date

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["enrollment_date"]
    ) -> MetaOapg.properties.enrollment_date:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["expiry_date"]
    ) -> MetaOapg.properties.expiry_date:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["initial_credits"]
    ) -> MetaOapg.properties.initial_credits:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["available_credits"]
    ) -> MetaOapg.properties.available_credits:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "name",
        "enrollment_date",
        "expiry_date",
        "initial_credits",
        "available_credits",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["enrollment_date"]
    ) -> MetaOapg.properties.enrollment_date:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["expiry_date"]
    ) -> MetaOapg.properties.expiry_date:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["initial_credits"]
    ) -> MetaOapg.properties.initial_credits:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["available_credits"]
    ) -> MetaOapg.properties.available_credits:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "name",
        "enrollment_date",
        "expiry_date",
        "initial_credits",
        "available_credits",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        available_credits: typing.Union[
            MetaOapg.properties.available_credits,
            decimal.Decimal,
            int,
            float,
        ],
        expiry_date: typing.Union[
            MetaOapg.properties.expiry_date,
            str,
            datetime,
        ],
        initial_credits: typing.Union[
            MetaOapg.properties.initial_credits,
            decimal.Decimal,
            int,
            float,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        enrollment_date: typing.Union[
            MetaOapg.properties.enrollment_date,
            str,
            datetime,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'UserCampaign':
        return super().__new__(
            cls,
            *_args,
            available_credits=available_credits,
            expiry_date=expiry_date,
            initial_credits=initial_credits,
            name=name,
            enrollment_date=enrollment_date,
            _configuration=_configuration,
            **kwargs,
        )
