# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class BillingReportEntity(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "total_cost",
            "description",
            "details",
            "label",
        }

        class properties:
            description = schemas.StrSchema
            label = schemas.StrSchema
            total_cost = schemas.NumberSchema

            class details(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['BillingReportRow']:
                        return BillingReportRow

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['BillingReportRow'],
                                       typing.List['BillingReportRow']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'details':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'BillingReportRow':
                    return super().__getitem__(i)

            __annotations__ = {
                "description": description,
                "label": label,
                "total_cost": total_cost,
                "details": details,
            }

    total_cost: MetaOapg.properties.total_cost
    description: MetaOapg.properties.description
    details: MetaOapg.properties.details
    label: MetaOapg.properties.label

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["description"]
    ) -> MetaOapg.properties.description:
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["label"]
    ) -> MetaOapg.properties.label:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["total_cost"]
    ) -> MetaOapg.properties.total_cost:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["details"]
    ) -> MetaOapg.properties.details:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "description",
        "label",
        "total_cost",
        "details",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["description"]
    ) -> MetaOapg.properties.description:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["label"]
    ) -> MetaOapg.properties.label:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["total_cost"]
    ) -> MetaOapg.properties.total_cost:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["details"]
    ) -> MetaOapg.properties.details:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "description",
        "label",
        "total_cost",
        "details",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        total_cost: typing.Union[
            MetaOapg.properties.total_cost,
            decimal.Decimal,
            int,
            float,
        ],
        description: typing.Union[
            MetaOapg.properties.description,
            str,
        ],
        details: typing.Union[
            MetaOapg.properties.details,
            list,
            tuple,
        ],
        label: typing.Union[
            MetaOapg.properties.label,
            str,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'BillingReportEntity':
        return super().__new__(
            cls,
            *_args,
            total_cost=total_cost,
            description=description,
            details=details,
            label=label,
            _configuration=_configuration,
            **kwargs,
        )


from inductiva.client.model.billing_report_row import BillingReportRow
