# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class UserQuotas(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "cost_per_hour",
            "machine_group_max_life_time_hours",
            "machine_group_idle_minutes",
            "machine_disk_size_gb",
            "total_num_machines",
            "total_num_vcpus",
        }

        class properties:

            @staticmethod
            def total_num_vcpus() -> typing.Type['Quota']:
                return Quota

            @staticmethod
            def total_num_machines() -> typing.Type['Quota']:
                return Quota

            @staticmethod
            def cost_per_hour() -> typing.Type['Quota']:
                return Quota

            @staticmethod
            def machine_disk_size_gb() -> typing.Type['Quota']:
                return Quota

            @staticmethod
            def machine_group_idle_minutes() -> typing.Type['Quota']:
                return Quota

            @staticmethod
            def machine_group_max_life_time_hours() -> typing.Type['Quota']:
                return Quota

            __annotations__ = {
                "total_num_vcpus":
                    total_num_vcpus,
                "total_num_machines":
                    total_num_machines,
                "cost_per_hour":
                    cost_per_hour,
                "machine_disk_size_gb":
                    machine_disk_size_gb,
                "machine_group_idle_minutes":
                    machine_group_idle_minutes,
                "machine_group_max_life_time_hours":
                    machine_group_max_life_time_hours,
            }

    cost_per_hour: 'Quota'
    machine_group_max_life_time_hours: 'Quota'
    machine_group_idle_minutes: 'Quota'
    machine_disk_size_gb: 'Quota'
    total_num_machines: 'Quota'
    total_num_vcpus: 'Quota'

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["total_num_vcpus"]) -> 'Quota':
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["total_num_machines"]) -> 'Quota':
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["cost_per_hour"]) -> 'Quota':
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["machine_disk_size_gb"]) -> 'Quota':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["machine_group_idle_minutes"]
    ) -> 'Quota':
        ...

    @typing.overload
    def __getitem__(
        self,
        name: typing_extensions.Literal["machine_group_max_life_time_hours"]
    ) -> 'Quota':
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "total_num_vcpus",
        "total_num_machines",
        "cost_per_hour",
        "machine_disk_size_gb",
        "machine_group_idle_minutes",
        "machine_group_max_life_time_hours",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["total_num_vcpus"]) -> 'Quota':
        ...

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["total_num_machines"]) -> 'Quota':
        ...

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["cost_per_hour"]) -> 'Quota':
        ...

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["machine_disk_size_gb"]) -> 'Quota':
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["machine_group_idle_minutes"]
    ) -> 'Quota':
        ...

    @typing.overload
    def get_item_oapg(
        self,
        name: typing_extensions.Literal["machine_group_max_life_time_hours"]
    ) -> 'Quota':
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "total_num_vcpus",
        "total_num_machines",
        "cost_per_hour",
        "machine_disk_size_gb",
        "machine_group_idle_minutes",
        "machine_group_max_life_time_hours",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        cost_per_hour: 'Quota',
        machine_group_max_life_time_hours: 'Quota',
        machine_group_idle_minutes: 'Quota',
        machine_disk_size_gb: 'Quota',
        total_num_machines: 'Quota',
        total_num_vcpus: 'Quota',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'UserQuotas':
        return super().__new__(
            cls,
            *_args,
            cost_per_hour=cost_per_hour,
            machine_group_max_life_time_hours=machine_group_max_life_time_hours,
            machine_group_idle_minutes=machine_group_idle_minutes,
            machine_disk_size_gb=machine_disk_size_gb,
            total_num_machines=total_num_machines,
            total_num_vcpus=total_num_vcpus,
            _configuration=_configuration,
            **kwargs,
        )


from inductiva.client.model.quota import Quota
