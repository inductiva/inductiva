# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class CampaignFullInfo(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "end_date",
            "capabilities",
            "quotas",
            "credits",
            "begin_date",
            "id",
            "label",
        }

        class properties:
            id = schemas.StrSchema
            label = schemas.StrSchema
            credits = schemas.NumberSchema
            begin_date = schemas.DateTimeSchema
            end_date = schemas.DateTimeSchema

            class capabilities(schemas.ListSchema):

                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[
                        MetaOapg.items,
                        str,
                    ]], typing.List[typing.Union[
                        MetaOapg.items,
                        str,
                    ]]],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'capabilities':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class quotas(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['CampaignQuota']:
                        return CampaignQuota

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CampaignQuota'],
                                       typing.List['CampaignQuota']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'quotas':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'CampaignQuota':
                    return super().__getitem__(i)

            __annotations__ = {
                "id": id,
                "label": label,
                "credits": credits,
                "begin_date": begin_date,
                "end_date": end_date,
                "capabilities": capabilities,
                "quotas": quotas,
            }

    end_date: MetaOapg.properties.end_date
    capabilities: MetaOapg.properties.capabilities
    quotas: MetaOapg.properties.quotas
    credits: MetaOapg.properties.credits
    begin_date: MetaOapg.properties.begin_date
    id: MetaOapg.properties.id
    label: MetaOapg.properties.label

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["label"]
    ) -> MetaOapg.properties.label:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["credits"]
    ) -> MetaOapg.properties.credits:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["begin_date"]
    ) -> MetaOapg.properties.begin_date:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["end_date"]
    ) -> MetaOapg.properties.end_date:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["capabilities"]
    ) -> MetaOapg.properties.capabilities:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["quotas"]
    ) -> MetaOapg.properties.quotas:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "id",
        "label",
        "credits",
        "begin_date",
        "end_date",
        "capabilities",
        "quotas",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["label"]
    ) -> MetaOapg.properties.label:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["credits"]
    ) -> MetaOapg.properties.credits:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["begin_date"]
    ) -> MetaOapg.properties.begin_date:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["end_date"]
    ) -> MetaOapg.properties.end_date:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["capabilities"]
    ) -> MetaOapg.properties.capabilities:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["quotas"]
    ) -> MetaOapg.properties.quotas:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "id",
        "label",
        "credits",
        "begin_date",
        "end_date",
        "capabilities",
        "quotas",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        end_date: typing.Union[
            MetaOapg.properties.end_date,
            str,
            datetime,
        ],
        capabilities: typing.Union[
            MetaOapg.properties.capabilities,
            list,
            tuple,
        ],
        quotas: typing.Union[
            MetaOapg.properties.quotas,
            list,
            tuple,
        ],
        credits: typing.Union[
            MetaOapg.properties.credits,
            decimal.Decimal,
            int,
            float,
        ],
        begin_date: typing.Union[
            MetaOapg.properties.begin_date,
            str,
            datetime,
        ],
        id: typing.Union[
            MetaOapg.properties.id,
            str,
        ],
        label: typing.Union[
            MetaOapg.properties.label,
            str,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'CampaignFullInfo':
        return super().__new__(
            cls,
            *_args,
            end_date=end_date,
            capabilities=capabilities,
            quotas=quotas,
            credits=credits,
            begin_date=begin_date,
            id=id,
            label=label,
            _configuration=_configuration,
            **kwargs,
        )


from inductiva.client.model.campaign_quota import CampaignQuota
