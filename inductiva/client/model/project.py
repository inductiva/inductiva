# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class Project(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "num_tasks",
            "name",
            "created_at",
            "id",
        }

        class properties:

            class name(schemas.StrSchema):

                class MetaOapg:
                    max_length = 128
                    min_length = 1

            id = schemas.UUIDSchema
            created_at = schemas.DateTimeSchema
            num_tasks = schemas.IntSchema

            class task_status_overview(schemas.DictSchema):

                class MetaOapg:
                    additional_properties = schemas.IntSchema

                def __getitem__(
                        self, name: typing.Union[
                            str,
                        ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(
                        self, name: typing.Union[
                            str,
                        ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        decimal.Decimal,
                        int,
                    ],
                ) -> 'task_status_overview':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "name": name,
                "id": id,
                "created_at": created_at,
                "num_tasks": num_tasks,
                "task_status_overview": task_status_overview,
            }

    num_tasks: MetaOapg.properties.num_tasks
    name: MetaOapg.properties.name
    created_at: MetaOapg.properties.created_at
    id: MetaOapg.properties.id

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["created_at"]
    ) -> MetaOapg.properties.created_at:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["num_tasks"]
    ) -> MetaOapg.properties.num_tasks:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["task_status_overview"]
    ) -> MetaOapg.properties.task_status_overview:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "name",
        "id",
        "created_at",
        "num_tasks",
        "task_status_overview",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["created_at"]
    ) -> MetaOapg.properties.created_at:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["num_tasks"]
    ) -> MetaOapg.properties.num_tasks:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["task_status_overview"]
    ) -> typing.Union[MetaOapg.properties.task_status_overview, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "name",
        "id",
        "created_at",
        "num_tasks",
        "task_status_overview",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        num_tasks: typing.Union[
            MetaOapg.properties.num_tasks,
            decimal.Decimal,
            int,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        created_at: typing.Union[
            MetaOapg.properties.created_at,
            str,
            datetime,
        ],
        id: typing.Union[
            MetaOapg.properties.id,
            str,
            uuid.UUID,
        ],
        task_status_overview: typing.Union[
            MetaOapg.properties.task_status_overview, dict,
            frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'Project':
        return super().__new__(
            cls,
            *_args,
            num_tasks=num_tasks,
            name=name,
            created_at=created_at,
            id=id,
            task_status_overview=task_status_overview,
            _configuration=_configuration,
            **kwargs,
        )
