# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class Bucket(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "is_internal",
            "name",
            "provider_id",
            "region",
        }

        class properties:
            provider_id = schemas.StrSchema
            name = schemas.StrSchema
            region = schemas.StrSchema
            is_internal = schemas.BoolSchema
            __annotations__ = {
                "provider_id": provider_id,
                "name": name,
                "region": region,
                "is_internal": is_internal,
            }

    is_internal: MetaOapg.properties.is_internal
    name: MetaOapg.properties.name
    provider_id: MetaOapg.properties.provider_id
    region: MetaOapg.properties.region

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["provider_id"]
    ) -> MetaOapg.properties.provider_id:
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["region"]
    ) -> MetaOapg.properties.region:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["is_internal"]
    ) -> MetaOapg.properties.is_internal:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "provider_id",
        "name",
        "region",
        "is_internal",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["provider_id"]
    ) -> MetaOapg.properties.provider_id:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["region"]
    ) -> MetaOapg.properties.region:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["is_internal"]
    ) -> MetaOapg.properties.is_internal:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "provider_id",
        "name",
        "region",
        "is_internal",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        is_internal: typing.Union[
            MetaOapg.properties.is_internal,
            bool,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        provider_id: typing.Union[
            MetaOapg.properties.provider_id,
            str,
        ],
        region: typing.Union[
            MetaOapg.properties.region,
            str,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'Bucket':
        return super().__new__(
            cls,
            *_args,
            is_internal=is_internal,
            name=name,
            provider_id=provider_id,
            region=region,
            _configuration=_configuration,
            **kwargs,
        )
