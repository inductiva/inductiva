# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class UserMostUsedSimulatorsOverview(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "num_tasks",
            "dedicated_resource_tasks",
            "simulator",
            "shared_resource_tasks",
            "tasks_simulator_cost",
            "success_rate_percentage",
        }

        class properties:
            simulator = schemas.StrSchema
            num_tasks = schemas.IntSchema
            shared_resource_tasks = schemas.IntSchema
            dedicated_resource_tasks = schemas.IntSchema
            tasks_simulator_cost = schemas.NumberSchema
            success_rate_percentage = schemas.NumberSchema
            __annotations__ = {
                "simulator": simulator,
                "num_tasks": num_tasks,
                "shared_resource_tasks": shared_resource_tasks,
                "dedicated_resource_tasks": dedicated_resource_tasks,
                "tasks_simulator_cost": tasks_simulator_cost,
                "success_rate_percentage": success_rate_percentage,
            }

    num_tasks: MetaOapg.properties.num_tasks
    dedicated_resource_tasks: MetaOapg.properties.dedicated_resource_tasks
    simulator: MetaOapg.properties.simulator
    shared_resource_tasks: MetaOapg.properties.shared_resource_tasks
    tasks_simulator_cost: MetaOapg.properties.tasks_simulator_cost
    success_rate_percentage: MetaOapg.properties.success_rate_percentage

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["simulator"]
    ) -> MetaOapg.properties.simulator:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["num_tasks"]
    ) -> MetaOapg.properties.num_tasks:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["shared_resource_tasks"]
    ) -> MetaOapg.properties.shared_resource_tasks:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["dedicated_resource_tasks"]
    ) -> MetaOapg.properties.dedicated_resource_tasks:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["tasks_simulator_cost"]
    ) -> MetaOapg.properties.tasks_simulator_cost:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["success_rate_percentage"]
    ) -> MetaOapg.properties.success_rate_percentage:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "simulator",
        "num_tasks",
        "shared_resource_tasks",
        "dedicated_resource_tasks",
        "tasks_simulator_cost",
        "success_rate_percentage",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["simulator"]
    ) -> MetaOapg.properties.simulator:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["num_tasks"]
    ) -> MetaOapg.properties.num_tasks:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["shared_resource_tasks"]
    ) -> MetaOapg.properties.shared_resource_tasks:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["dedicated_resource_tasks"]
    ) -> MetaOapg.properties.dedicated_resource_tasks:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["tasks_simulator_cost"]
    ) -> MetaOapg.properties.tasks_simulator_cost:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["success_rate_percentage"]
    ) -> MetaOapg.properties.success_rate_percentage:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "simulator",
        "num_tasks",
        "shared_resource_tasks",
        "dedicated_resource_tasks",
        "tasks_simulator_cost",
        "success_rate_percentage",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        num_tasks: typing.Union[
            MetaOapg.properties.num_tasks,
            decimal.Decimal,
            int,
        ],
        dedicated_resource_tasks: typing.Union[
            MetaOapg.properties.dedicated_resource_tasks,
            decimal.Decimal,
            int,
        ],
        simulator: typing.Union[
            MetaOapg.properties.simulator,
            str,
        ],
        shared_resource_tasks: typing.Union[
            MetaOapg.properties.shared_resource_tasks,
            decimal.Decimal,
            int,
        ],
        tasks_simulator_cost: typing.Union[
            MetaOapg.properties.tasks_simulator_cost,
            decimal.Decimal,
            int,
            float,
        ],
        success_rate_percentage: typing.Union[
            MetaOapg.properties.success_rate_percentage,
            decimal.Decimal,
            int,
            float,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'UserMostUsedSimulatorsOverview':
        return super().__new__(
            cls,
            *_args,
            num_tasks=num_tasks,
            dedicated_resource_tasks=dedicated_resource_tasks,
            simulator=simulator,
            shared_resource_tasks=shared_resource_tasks,
            tasks_simulator_cost=tasks_simulator_cost,
            success_rate_percentage=success_rate_percentage,
            _configuration=_configuration,
            **kwargs,
        )
