# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class AvailableSimulatorVersions(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "development",
            "production",
        }

        class properties:

            class development(schemas.DictSchema):

                class MetaOapg:

                    class additional_properties(schemas.ListSchema):

                        class MetaOapg:
                            items = schemas.StrSchema

                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[
                                MetaOapg.items,
                                str,
                            ]], typing.List[typing.Union[
                                MetaOapg.items,
                                str,
                            ]]],
                            _configuration: typing.Optional[
                                schemas.Configuration] = None,
                        ) -> 'additional_properties':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )

                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)

                def __getitem__(
                        self, name: typing.Union[
                            str,
                        ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(
                        self, name: typing.Union[
                            str,
                        ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        list,
                        tuple,
                    ],
                ) -> 'development':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class production(schemas.DictSchema):

                class MetaOapg:

                    class additional_properties(schemas.ListSchema):

                        class MetaOapg:
                            items = schemas.StrSchema

                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[
                                MetaOapg.items,
                                str,
                            ]], typing.List[typing.Union[
                                MetaOapg.items,
                                str,
                            ]]],
                            _configuration: typing.Optional[
                                schemas.Configuration] = None,
                        ) -> 'additional_properties':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )

                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)

                def __getitem__(
                        self, name: typing.Union[
                            str,
                        ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(
                        self, name: typing.Union[
                            str,
                        ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        list,
                        tuple,
                    ],
                ) -> 'production':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "development": development,
                "production": production,
            }

    development: MetaOapg.properties.development
    production: MetaOapg.properties.production

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["development"]
    ) -> MetaOapg.properties.development:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["production"]
    ) -> MetaOapg.properties.production:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "development",
        "production",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["development"]
    ) -> MetaOapg.properties.development:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["production"]
    ) -> MetaOapg.properties.production:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "development",
        "production",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        development: typing.Union[
            MetaOapg.properties.development,
            dict,
            frozendict.frozendict,
        ],
        production: typing.Union[
            MetaOapg.properties.production,
            dict,
            frozendict.frozendict,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'AvailableSimulatorVersions':
        return super().__new__(
            cls,
            *_args,
            development=development,
            production=production,
            _configuration=_configuration,
            **kwargs,
        )
