# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class QueueStatus(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Dataclass that represents the status of a task queue.

Attributes:
    num_executers: Number of executers.
    running_tasks: Number of tasks currently running.
    tasks_ahead: Number of jobs ahead in the queue.
    """

    class MetaOapg:
        required = {
            "running_tasks",
            "tasks_ahead",
            "num_executers",
        }

        class properties:
            num_executers = schemas.IntSchema
            running_tasks = schemas.IntSchema
            tasks_ahead = schemas.IntSchema
            __annotations__ = {
                "num_executers": num_executers,
                "running_tasks": running_tasks,
                "tasks_ahead": tasks_ahead,
            }

    running_tasks: MetaOapg.properties.running_tasks
    tasks_ahead: MetaOapg.properties.tasks_ahead
    num_executers: MetaOapg.properties.num_executers

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["num_executers"]
    ) -> MetaOapg.properties.num_executers:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["running_tasks"]
    ) -> MetaOapg.properties.running_tasks:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["tasks_ahead"]
    ) -> MetaOapg.properties.tasks_ahead:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "num_executers",
        "running_tasks",
        "tasks_ahead",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["num_executers"]
    ) -> MetaOapg.properties.num_executers:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["running_tasks"]
    ) -> MetaOapg.properties.running_tasks:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["tasks_ahead"]
    ) -> MetaOapg.properties.tasks_ahead:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "num_executers",
        "running_tasks",
        "tasks_ahead",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        running_tasks: typing.Union[
            MetaOapg.properties.running_tasks,
            decimal.Decimal,
            int,
        ],
        tasks_ahead: typing.Union[
            MetaOapg.properties.tasks_ahead,
            decimal.Decimal,
            int,
        ],
        num_executers: typing.Union[
            MetaOapg.properties.num_executers,
            decimal.Decimal,
            int,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'QueueStatus':
        return super().__new__(
            cls,
            *_args,
            running_tasks=running_tasks,
            tasks_ahead=tasks_ahead,
            num_executers=num_executers,
            _configuration=_configuration,
            **kwargs,
        )
