# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class OrganizationCostComponents(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "total",
            "infrastructure",
            "users",
        }

        class properties:

            class total(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['CostDetail']:
                        return CostDetail

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CostDetail'],
                                       typing.List['CostDetail']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'total':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'CostDetail':
                    return super().__getitem__(i)

            class users(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['UserCostsDetails']:
                        return UserCostsDetails

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UserCostsDetails'],
                                       typing.List['UserCostsDetails']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'UserCostsDetails':
                    return super().__getitem__(i)

            class infrastructure(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['CostDetail']:
                        return CostDetail

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CostDetail'],
                                       typing.List['CostDetail']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'infrastructure':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'CostDetail':
                    return super().__getitem__(i)

            __annotations__ = {
                "total": total,
                "users": users,
                "infrastructure": infrastructure,
            }

    total: MetaOapg.properties.total
    infrastructure: MetaOapg.properties.infrastructure
    users: MetaOapg.properties.users

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["total"]
    ) -> MetaOapg.properties.total:
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["users"]
    ) -> MetaOapg.properties.users:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["infrastructure"]
    ) -> MetaOapg.properties.infrastructure:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "total",
        "users",
        "infrastructure",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["total"]
    ) -> MetaOapg.properties.total:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["users"]
    ) -> MetaOapg.properties.users:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["infrastructure"]
    ) -> MetaOapg.properties.infrastructure:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "total",
        "users",
        "infrastructure",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        total: typing.Union[
            MetaOapg.properties.total,
            list,
            tuple,
        ],
        infrastructure: typing.Union[
            MetaOapg.properties.infrastructure,
            list,
            tuple,
        ],
        users: typing.Union[
            MetaOapg.properties.users,
            list,
            tuple,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'OrganizationCostComponents':
        return super().__new__(
            cls,
            *_args,
            total=total,
            infrastructure=infrastructure,
            users=users,
            _configuration=_configuration,
            **kwargs,
        )


from inductiva.client.model.cost_detail import CostDetail
from inductiva.client.model.user_costs_details import UserCostsDetails
