# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class CostDetail(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "components",
            "total",
            "month",
            "type",
        }

        class properties:
            month = schemas.StrSchema
            total = schemas.NumberSchema

            @staticmethod
            def components() -> typing.Type['CostComponents']:
                return CostComponents

            @staticmethod
            def type() -> typing.Type['CostType']:
                return CostType

            class warning(
                    schemas.ComposedSchema,):

                class MetaOapg:
                    any_of_0 = schemas.StrSchema
                    any_of_1 = schemas.NoneSchema

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'warning':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "month": month,
                "total": total,
                "components": components,
                "type": type,
                "warning": warning,
            }

    components: 'CostComponents'
    total: MetaOapg.properties.total
    month: MetaOapg.properties.month
    type: 'CostType'

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["month"]
    ) -> MetaOapg.properties.month:
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["total"]
    ) -> MetaOapg.properties.total:
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["components"]) -> 'CostComponents':
        ...

    @typing.overload
    def __getitem__(self,
                    name: typing_extensions.Literal["type"]) -> 'CostType':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["warning"]
    ) -> MetaOapg.properties.warning:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "month",
        "total",
        "components",
        "type",
        "warning",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["month"]
    ) -> MetaOapg.properties.month:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["total"]
    ) -> MetaOapg.properties.total:
        ...

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["components"]) -> 'CostComponents':
        ...

    @typing.overload
    def get_item_oapg(self,
                      name: typing_extensions.Literal["type"]) -> 'CostType':
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["warning"]
    ) -> typing.Union[MetaOapg.properties.warning, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "month",
        "total",
        "components",
        "type",
        "warning",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        components: 'CostComponents',
        total: typing.Union[
            MetaOapg.properties.total,
            decimal.Decimal,
            int,
            float,
        ],
        month: typing.Union[
            MetaOapg.properties.month,
            str,
        ],
        type: 'CostType',
        warning: typing.Union[MetaOapg.properties.warning, dict,
                              frozendict.frozendict, str, date, datetime,
                              uuid.UUID, int, float, decimal.Decimal, bool,
                              None, list, tuple, bytes, io.FileIO,
                              io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'CostDetail':
        return super().__new__(
            cls,
            *_args,
            components=components,
            total=total,
            month=month,
            type=type,
            warning=warning,
            _configuration=_configuration,
            **kwargs,
        )


from inductiva.client.model.cost_components import CostComponents
from inductiva.client.model.cost_type import CostType
