# coding: utf-8
"""
    InductivaWebAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inductiva.client import schemas  # noqa: F401


class MachineGroupWithCostsAdminView(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "machine_type",
            "costs",
            "num_vms",
            "creation_timestamp",
            "type",
            "disk_size_gb",
            "threads_per_core",
            "spot",
            "name",
            "provider_id",
            "id",
            "user",
            "statistics",
            "status",
        }

        class properties:
            id = schemas.UUIDSchema
            name = schemas.StrSchema
            machine_type = schemas.StrSchema
            disk_size_gb = schemas.IntSchema
            num_vms = schemas.IntSchema
            spot = schemas.BoolSchema

            @staticmethod
            def type() -> typing.Type['MachineGroupType']:
                return MachineGroupType

            creation_timestamp = schemas.DateTimeSchema

            @staticmethod
            def provider_id() -> typing.Type['Providers']:
                return Providers

            @staticmethod
            def status() -> typing.Type['MachineGroupStatus']:
                return MachineGroupStatus

            threads_per_core = schemas.IntSchema

            @staticmethod
            def statistics() -> typing.Type['MachineGroupUsageStatistics']:
                return MachineGroupUsageStatistics

            @staticmethod
            def costs() -> typing.Type['MachineGroupCostsAdminView']:
                return MachineGroupCostsAdminView

            @staticmethod
            def user() -> typing.Type['UserEmailOrganization']:
                return UserEmailOrganization

            class auto_resize_disk_max_gb(
                    schemas.ComposedSchema,):

                class MetaOapg:
                    any_of_0 = schemas.IntSchema
                    any_of_1 = schemas.NoneSchema

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'auto_resize_disk_max_gb':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class min_vms(
                    schemas.ComposedSchema,):

                class MetaOapg:
                    any_of_0 = schemas.IntSchema
                    any_of_1 = schemas.NoneSchema

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'min_vms':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class max_vms(
                    schemas.ComposedSchema,):

                class MetaOapg:
                    any_of_0 = schemas.IntSchema
                    any_of_1 = schemas.NoneSchema

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'max_vms':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class start_timestamp(
                    schemas.DateTimeBase,
                    schemas.ComposedSchema,
            ):

                class MetaOapg:
                    format = 'date-time'
                    any_of_0 = schemas.StrSchema
                    any_of_1 = schemas.NoneSchema

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'start_timestamp':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class deletion_timestamp(
                    schemas.DateTimeBase,
                    schemas.ComposedSchema,
            ):

                class MetaOapg:
                    format = 'date-time'
                    any_of_0 = schemas.StrSchema
                    any_of_1 = schemas.NoneSchema

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'deletion_timestamp':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class provider_description(
                    schemas.ComposedSchema,):

                class MetaOapg:
                    any_of_0 = schemas.StrSchema
                    any_of_1 = schemas.NoneSchema

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'provider_description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class max_idle_time(
                    schemas.ComposedSchema,):

                class MetaOapg:
                    format = 'time-delta'
                    any_of_0 = schemas.NumberSchema
                    any_of_1 = schemas.NoneSchema

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'max_idle_time':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            class termination_reason(
                    schemas.ComposedSchema,):

                class MetaOapg:
                    any_of_0 = schemas.StrSchema
                    any_of_1 = schemas.NoneSchema

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                        str,
                        date,
                        datetime,
                        uuid.UUID,
                        int,
                        float,
                        decimal.Decimal,
                        bool,
                        None,
                        list,
                        tuple,
                        bytes,
                        io.FileIO,
                        io.BufferedReader,
                    ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'termination_reason':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            __annotations__ = {
                "id": id,
                "name": name,
                "machine_type": machine_type,
                "disk_size_gb": disk_size_gb,
                "num_vms": num_vms,
                "spot": spot,
                "type": type,
                "creation_timestamp": creation_timestamp,
                "provider_id": provider_id,
                "status": status,
                "threads_per_core": threads_per_core,
                "statistics": statistics,
                "costs": costs,
                "user": user,
                "auto_resize_disk_max_gb": auto_resize_disk_max_gb,
                "min_vms": min_vms,
                "max_vms": max_vms,
                "start_timestamp": start_timestamp,
                "deletion_timestamp": deletion_timestamp,
                "provider_description": provider_description,
                "max_idle_time": max_idle_time,
                "termination_reason": termination_reason,
            }

    machine_type: MetaOapg.properties.machine_type
    costs: 'MachineGroupCostsAdminView'
    num_vms: MetaOapg.properties.num_vms
    creation_timestamp: MetaOapg.properties.creation_timestamp
    type: 'MachineGroupType'
    disk_size_gb: MetaOapg.properties.disk_size_gb
    threads_per_core: MetaOapg.properties.threads_per_core
    spot: MetaOapg.properties.spot
    name: MetaOapg.properties.name
    provider_id: 'Providers'
    id: MetaOapg.properties.id
    user: 'UserEmailOrganization'
    statistics: 'MachineGroupUsageStatistics'
    status: 'MachineGroupStatus'

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["machine_type"]
    ) -> MetaOapg.properties.machine_type:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["disk_size_gb"]
    ) -> MetaOapg.properties.disk_size_gb:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["num_vms"]
    ) -> MetaOapg.properties.num_vms:
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["spot"]
    ) -> MetaOapg.properties.spot:
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["type"]) -> 'MachineGroupType':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["creation_timestamp"]
    ) -> MetaOapg.properties.creation_timestamp:
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["provider_id"]) -> 'Providers':
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["status"]) -> 'MachineGroupStatus':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["threads_per_core"]
    ) -> MetaOapg.properties.threads_per_core:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["statistics"]
    ) -> 'MachineGroupUsageStatistics':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["costs"]
    ) -> 'MachineGroupCostsAdminView':
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["user"]) -> 'UserEmailOrganization':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["auto_resize_disk_max_gb"]
    ) -> MetaOapg.properties.auto_resize_disk_max_gb:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["min_vms"]
    ) -> MetaOapg.properties.min_vms:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["max_vms"]
    ) -> MetaOapg.properties.max_vms:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["start_timestamp"]
    ) -> MetaOapg.properties.start_timestamp:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["deletion_timestamp"]
    ) -> MetaOapg.properties.deletion_timestamp:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["provider_description"]
    ) -> MetaOapg.properties.provider_description:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["max_idle_time"]
    ) -> MetaOapg.properties.max_idle_time:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["termination_reason"]
    ) -> MetaOapg.properties.termination_reason:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal[
        "id",
        "name",
        "machine_type",
        "disk_size_gb",
        "num_vms",
        "spot",
        "type",
        "creation_timestamp",
        "provider_id",
        "status",
        "threads_per_core",
        "statistics",
        "costs",
        "user",
        "auto_resize_disk_max_gb",
        "min_vms",
        "max_vms",
        "start_timestamp",
        "deletion_timestamp",
        "provider_description",
        "max_idle_time",
        "termination_reason",
    ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["machine_type"]
    ) -> MetaOapg.properties.machine_type:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["disk_size_gb"]
    ) -> MetaOapg.properties.disk_size_gb:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["num_vms"]
    ) -> MetaOapg.properties.num_vms:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["spot"]
    ) -> MetaOapg.properties.spot:
        ...

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["type"]) -> 'MachineGroupType':
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["creation_timestamp"]
    ) -> MetaOapg.properties.creation_timestamp:
        ...

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["provider_id"]) -> 'Providers':
        ...

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["status"]) -> 'MachineGroupStatus':
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["threads_per_core"]
    ) -> MetaOapg.properties.threads_per_core:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["statistics"]
    ) -> 'MachineGroupUsageStatistics':
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["costs"]
    ) -> 'MachineGroupCostsAdminView':
        ...

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["user"]) -> 'UserEmailOrganization':
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["auto_resize_disk_max_gb"]
    ) -> typing.Union[MetaOapg.properties.auto_resize_disk_max_gb,
                      schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["min_vms"]
    ) -> typing.Union[MetaOapg.properties.min_vms, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["max_vms"]
    ) -> typing.Union[MetaOapg.properties.max_vms, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["start_timestamp"]
    ) -> typing.Union[MetaOapg.properties.start_timestamp, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["deletion_timestamp"]
    ) -> typing.Union[MetaOapg.properties.deletion_timestamp, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["provider_description"]
    ) -> typing.Union[MetaOapg.properties.provider_description, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["max_idle_time"]
    ) -> typing.Union[MetaOapg.properties.max_idle_time, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["termination_reason"]
    ) -> typing.Union[MetaOapg.properties.termination_reason, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
            self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal[
        "id",
        "name",
        "machine_type",
        "disk_size_gb",
        "num_vms",
        "spot",
        "type",
        "creation_timestamp",
        "provider_id",
        "status",
        "threads_per_core",
        "statistics",
        "costs",
        "user",
        "auto_resize_disk_max_gb",
        "min_vms",
        "max_vms",
        "start_timestamp",
        "deletion_timestamp",
        "provider_description",
        "max_idle_time",
        "termination_reason",
    ], str]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        machine_type: typing.Union[
            MetaOapg.properties.machine_type,
            str,
        ],
        costs: 'MachineGroupCostsAdminView',
        num_vms: typing.Union[
            MetaOapg.properties.num_vms,
            decimal.Decimal,
            int,
        ],
        creation_timestamp: typing.Union[
            MetaOapg.properties.creation_timestamp,
            str,
            datetime,
        ],
        type: 'MachineGroupType',
        disk_size_gb: typing.Union[
            MetaOapg.properties.disk_size_gb,
            decimal.Decimal,
            int,
        ],
        threads_per_core: typing.Union[
            MetaOapg.properties.threads_per_core,
            decimal.Decimal,
            int,
        ],
        spot: typing.Union[
            MetaOapg.properties.spot,
            bool,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        provider_id: 'Providers',
        id: typing.Union[
            MetaOapg.properties.id,
            str,
            uuid.UUID,
        ],
        user: 'UserEmailOrganization',
        statistics: 'MachineGroupUsageStatistics',
        status: 'MachineGroupStatus',
        auto_resize_disk_max_gb: typing.Union[
            MetaOapg.properties.auto_resize_disk_max_gb, dict,
            frozendict.frozendict, str, date, datetime, uuid.UUID, int, float,
            decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO,
            io.BufferedReader, schemas.Unset] = schemas.unset,
        min_vms: typing.Union[MetaOapg.properties.min_vms, dict,
                              frozendict.frozendict, str, date, datetime,
                              uuid.UUID, int, float, decimal.Decimal, bool,
                              None, list, tuple, bytes, io.FileIO,
                              io.BufferedReader, schemas.Unset] = schemas.unset,
        max_vms: typing.Union[MetaOapg.properties.max_vms, dict,
                              frozendict.frozendict, str, date, datetime,
                              uuid.UUID, int, float, decimal.Decimal, bool,
                              None, list, tuple, bytes, io.FileIO,
                              io.BufferedReader, schemas.Unset] = schemas.unset,
        start_timestamp: typing.Union[MetaOapg.properties.start_timestamp, dict,
                                      frozendict.frozendict, str, date,
                                      datetime, uuid.UUID, int, float,
                                      decimal.Decimal, bool, None, list, tuple,
                                      bytes, io.FileIO, io.BufferedReader,
                                      schemas.Unset] = schemas.unset,
        deletion_timestamp: typing.Union[MetaOapg.properties.deletion_timestamp,
                                         dict, frozendict.frozendict, str, date,
                                         datetime, uuid.UUID, int, float,
                                         decimal.Decimal, bool, None, list,
                                         tuple, bytes, io.FileIO,
                                         io.BufferedReader,
                                         schemas.Unset] = schemas.unset,
        provider_description: typing.Union[
            MetaOapg.properties.provider_description, dict,
            frozendict.frozendict, str, date, datetime, uuid.UUID, int, float,
            decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO,
            io.BufferedReader, schemas.Unset] = schemas.unset,
        max_idle_time: typing.Union[MetaOapg.properties.max_idle_time, dict,
                                    frozendict.frozendict, str, date, datetime,
                                    uuid.UUID, int, float, decimal.Decimal,
                                    bool, None, list, tuple, bytes, io.FileIO,
                                    io.BufferedReader,
                                    schemas.Unset] = schemas.unset,
        termination_reason: typing.Union[MetaOapg.properties.termination_reason,
                                         dict, frozendict.frozendict, str, date,
                                         datetime, uuid.UUID, int, float,
                                         decimal.Decimal, bool, None, list,
                                         tuple, bytes, io.FileIO,
                                         io.BufferedReader,
                                         schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                               frozendict.frozendict, str, date, datetime,
                               uuid.UUID, int, float, decimal.Decimal, None,
                               list, tuple, bytes],
    ) -> 'MachineGroupWithCostsAdminView':
        return super().__new__(
            cls,
            *_args,
            machine_type=machine_type,
            costs=costs,
            num_vms=num_vms,
            creation_timestamp=creation_timestamp,
            type=type,
            disk_size_gb=disk_size_gb,
            threads_per_core=threads_per_core,
            spot=spot,
            name=name,
            provider_id=provider_id,
            id=id,
            user=user,
            statistics=statistics,
            status=status,
            auto_resize_disk_max_gb=auto_resize_disk_max_gb,
            min_vms=min_vms,
            max_vms=max_vms,
            start_timestamp=start_timestamp,
            deletion_timestamp=deletion_timestamp,
            provider_description=provider_description,
            max_idle_time=max_idle_time,
            termination_reason=termination_reason,
            _configuration=_configuration,
            **kwargs,
        )


from inductiva.client.model.machine_group_costs_admin_view import MachineGroupCostsAdminView
from inductiva.client.model.machine_group_status import MachineGroupStatus
from inductiva.client.model.machine_group_type import MachineGroupType
from inductiva.client.model.machine_group_usage_statistics import MachineGroupUsageStatistics
from inductiva.client.model.providers import Providers
from inductiva.client.model.user_email_organization import UserEmailOrganization
