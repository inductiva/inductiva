#compdef inductiva

# AUTOMATICALLY GENERATED by `shtab`


_shtab_inductiva_commands() {
  local _commands=(
    "autocomplete:Controls the autocomplete behavior for the inductiva package."
    "logs:Stream the STDOUT of a running task."
    "resources:Computational resource management utilities."
    "storage:Remote storage management utilities."
    "tasks:Task management utilities."
  )
  _describe 'inductiva commands' _commands
}

_shtab_inductiva_autocomplete_commands() {
  local _commands=(
    "enable:Enables sutocomplete for shell commands."
  )
  _describe 'inductiva autocomplete commands' _commands
}

_shtab_inductiva_resources_commands() {
  local _commands=(
    "available:The \`inductiva available\` command provides a utility for listing all"
    "cost:The \`inductiva cost\` command provides a utility for estimating the cost"
    "list:The \`inductiva resources list\` command provides a snapshot of your active computational resources."
    "ls:The \`inductiva resources list\` command provides a snapshot of your active computational resources."
    "terminate:The \`inductiva resources terminate\` command provides a utility for terminating"
  )
  _describe 'inductiva resources commands' _commands
}

_shtab_inductiva_storage_commands() {
  local _commands=(
    "list:The \`inductiva storage list\` command provides an overview of your data on the platform."
    "ls:The \`inductiva storage list\` command provides an overview of your data on the platform."
    "remove:The \`inductiva storage remove\` command deletes specified data from the platform."
    "rm:The \`inductiva storage remove\` command deletes specified data from the platform."
    "size:The \`inductiva storage size\` command calculates the total size of your data on the platform."
  )
  _describe 'inductiva storage commands' _commands
}

_shtab_inductiva_tasks_commands() {
  local _commands=(
    "kill:The \`inductiva tasks kill\` command terminates specified tasks on the platform."
    "list:The \`inductiva tasks list\` command provides an overview of your tasks on the platform."
  )
  _describe 'inductiva tasks commands' _commands
}

_shtab_inductiva_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "(- : *)"{-s,--print-completion}"[print shell completion script]:print_completion:(bash zsh tcsh)"
  "(- : *)"{-V,--version}"[show program\'s version number and exit]"
  "--api-key[API key to use. If not provided, it will be read from the INDUCTIVA_API_KEY environment variable.]:api_key:"
)

_shtab_inductiva_autocomplete_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_inductiva_autocomplete_enable_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--shell[The shell used, eitheir bash or zsh]:shell:"
)

_shtab_inductiva_logs_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  ":ID of the task for which to consume the stream.:"
)

_shtab_inductiva_resources_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_inductiva_resources_available_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_inductiva_resources_cost_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--spot[Type of machine to launch.]"
  {-n,--num_machines}"[Number of machines to launch.]:num_machines:"
  ":Type of machine to launch.:"
)

_shtab_inductiva_resources_list_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_inductiva_resources_ls_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_inductiva_resources_terminate_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-y,--yes}"[Sets any confirmation values to \"yes\" automatically. Users will not be asked for confirmation to terminate resource(s).]"
  "--all[Terminate all machines.]"
  "(*)::Name(s) of the resource(s) to terminate.:"
)

_shtab_inductiva_storage_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_inductiva_storage_list_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-m,--max-results}"[]:max_results:"
  {-o,--order-by}"[Order by creation_time or size.]:order_by:(creation_time size)"
  {-s,--sort-order}"[Sorting order (desc or asc).]:sort_order:(desc asc)"
  ":path:"
)

_shtab_inductiva_storage_ls_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-m,--max-results}"[]:max_results:"
  {-o,--order-by}"[Order by creation_time or size.]:order_by:(creation_time size)"
  {-s,--sort-order}"[Sorting order (desc or asc).]:sort_order:(desc asc)"
  ":path:"
)

_shtab_inductiva_storage_remove_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-y,--yes}"[Sets any confirmation values to \"yes\" automatically. Users will not be asked for confirmation to remove path(s) from remote storage.]"
  "--all[Remove all contents from remote storage.]"
  "(*)::Path(s) to be removed from remote storage. To remove all contents, use \"\*\".:"
)

_shtab_inductiva_storage_rm_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-y,--yes}"[Sets any confirmation values to \"yes\" automatically. Users will not be asked for confirmation to remove path(s) from remote storage.]"
  "--all[Remove all contents from remote storage.]"
  "(*)::Path(s) to be removed from remote storage. To remove all contents, use \"\*\".:"
)

_shtab_inductiva_storage_size_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_inductiva_tasks_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
)

_shtab_inductiva_tasks_kill_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-w,--wait-timeout}"[Number of seconds to wait for the kill command. If not provided, the system sends the request without waiting a response.]:wait_timeout:"
  {-y,--yes}"[Skip kill confirmation.]"
  "--all[Kill all running tasks.]"
  "(*)::ID(s) of the task(s) to kill.:"
)

_shtab_inductiva_tasks_list_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  {-n,--last-n}"[List last N tasks. Default\: 5.]:last_n:"
  {-id,--task-id}"[List a task with a specific ID.]:task_id:"
)


_shtab_inductiva() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_inductiva_options[(I)${(q)one_or_more}*]} + ${_shtab_inductiva_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_inductiva_options+=(': :_shtab_inductiva_commands' '*::: :->inductiva')
  fi
  _arguments -C -s $_shtab_inductiva_options

  case $state in
    inductiva)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_inductiva-$line[1]:"
      case $line[1] in
        autocomplete) _shtab_inductiva_autocomplete ;;
        logs) _arguments -C -s $_shtab_inductiva_logs_options ;;
        resources) _shtab_inductiva_resources ;;
        storage) _shtab_inductiva_storage ;;
        tasks) _shtab_inductiva_tasks ;;
      esac
  esac
}

_shtab_inductiva_autocomplete() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_inductiva_autocomplete_options[(I)${(q)one_or_more}*]} + ${_shtab_inductiva_autocomplete_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_inductiva_autocomplete_options+=(': :_shtab_inductiva_autocomplete_commands' '*::: :->autocomplete')
  fi
  _arguments -C -s $_shtab_inductiva_autocomplete_options

  case $state in
    autocomplete)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_inductiva_autocomplete-$line[1]:"
      case $line[1] in
        enable) _arguments -C -s $_shtab_inductiva_autocomplete_enable_options ;;
      esac
  esac
}

_shtab_inductiva_resources() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_inductiva_resources_options[(I)${(q)one_or_more}*]} + ${_shtab_inductiva_resources_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_inductiva_resources_options+=(': :_shtab_inductiva_resources_commands' '*::: :->resources')
  fi
  _arguments -C -s $_shtab_inductiva_resources_options

  case $state in
    resources)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_inductiva_resources-$line[1]:"
      case $line[1] in
        available) _arguments -C -s $_shtab_inductiva_resources_available_options ;;
        cost) _arguments -C -s $_shtab_inductiva_resources_cost_options ;;
        list) _arguments -C -s $_shtab_inductiva_resources_list_options ;;
        ls) _arguments -C -s $_shtab_inductiva_resources_ls_options ;;
        terminate) _arguments -C -s $_shtab_inductiva_resources_terminate_options ;;
      esac
  esac
}

_shtab_inductiva_storage() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_inductiva_storage_options[(I)${(q)one_or_more}*]} + ${_shtab_inductiva_storage_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_inductiva_storage_options+=(': :_shtab_inductiva_storage_commands' '*::: :->storage')
  fi
  _arguments -C -s $_shtab_inductiva_storage_options

  case $state in
    storage)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_inductiva_storage-$line[1]:"
      case $line[1] in
        list) _arguments -C -s $_shtab_inductiva_storage_list_options ;;
        ls) _arguments -C -s $_shtab_inductiva_storage_ls_options ;;
        remove) _arguments -C -s $_shtab_inductiva_storage_remove_options ;;
        rm) _arguments -C -s $_shtab_inductiva_storage_rm_options ;;
        size) _arguments -C -s $_shtab_inductiva_storage_size_options ;;
      esac
  esac
}

_shtab_inductiva_tasks() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_inductiva_tasks_options[(I)${(q)one_or_more}*]} + ${_shtab_inductiva_tasks_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_inductiva_tasks_options+=(': :_shtab_inductiva_tasks_commands' '*::: :->tasks')
  fi
  _arguments -C -s $_shtab_inductiva_tasks_options

  case $state in
    tasks)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_inductiva_tasks-$line[1]:"
      case $line[1] in
        kill) _arguments -C -s $_shtab_inductiva_tasks_kill_options ;;
        list) _arguments -C -s $_shtab_inductiva_tasks_list_options ;;
      esac
  esac
}



typeset -A opt_args
_shtab_inductiva "$@"
